%%-*- mode: erlang -*
%% ex: ft=erlang

%% SNMP Agent Configuration (all hidden)
{mapping, "snmp.agent.priority", "snmp.agent.priority", [{default, normal},
                                                         {datatype, atom},
                                                         hidden]}.
{mapping, "snmp.agent.versions", "snmp.agent.versions", [{default, "[v2, v3]"},
                                                         {datatype, string},
                                                         hidden]}.
{mapping, "snmp.agent.db_dir", "snmp.agent.db_dir", [{default, "/tmp"},
                                                     {datatype, directory},
                                                     hidden]}.
{mapping, "snmp.agent.db_init_error", "snmp.agent.db_init_error", [{default, on},
                                                                   {datatype, flag},
                                                                   hidden]}.
{mapping, "snmp.agent.mibs.$id", "snmp.agent.mibs", [{default, "snmp/mibs/EXOMETER-METRICS-MIB.bin"},
                                                     {datatype, file},
                                                     hidden]}.
{mapping, "snmp.agent.mib_storage.module", "snmp.agent.mib_storage.module", [{default, snmpa_mib_storage_ets},
                                                                             {datatype, atom},
                                                                             hidden]}.
{mapping, "snmp.agent.target_cache.verbosity", "snmp.agent.target_cache.verbosity", [{default, info},
                                                                                     {datatype, atom},
                                                                                     hidden]}.
{mapping, "snmp.agent.symbolic_store.verbosity", "snmp.agent.symbolic_store.verbosity", [{default, info},
                                                                                         {datatype, atom},
                                                                                         hidden]}.
{mapping, "snmp.agent.local_db.repair", "snmp.agent.local_db.repair", [{default, on},
                                                                       {datatype, flag},
                                                                       hidden]}.
{mapping, "snmp.agent.local_db.auto_save", "snmp.agent.local_db.auto_save", [{default, 5000},
                                                                             {datatype, integer},
                                                                             hidden]}.
{mapping, "snmp.agent.local_db.verbosity", "snmp.agent.local_db.verbosity", [{default, info},
                                                                             {datatype, atom},
                                                                             hidden]}.
{mapping, "snmp.agent.error_report_module", "snmp.agent.error_report_module", [{default, smpa_error_logger},
                                                                               {datatype, atom},
                                                                               hidden]}.
{mapping, "snmp.agent.agent_type", "snmp.agent.agent_type", [{default, master},
                                                             {datatype, atom},
                                                             hidden]}.
{mapping, "snmp.agent.agent_verbosity", "snmp.agent.agent_verbosity", [{default, info},
                                                                       {datatype, atom},
                                                                       hidden]}.
{mapping, "snmp.agent.discovery.terminating.enable", "snmp.agent.discovery.terminating.enable", [{default, off},
                                                                                                 {datatype, flag},
                                                                                                 hidden]}.
{mapping, "snmp.agent.discovery.originating.enable", "snmp.agent.discovery.originating.enable", [{default, on},
                                                                                                 {datatype, flag},
                                                                                                 hidden]}.
{mapping, "snmp.agent.config.dir", "snmp.agent.config.dir", [{default, "snmp"},
                                                             {datatype, directory},
                                                             hidden]}.
{mapping, "snmp.agent.config.force_load", "snmp.agent.config.force_load", [{default, on},
                                                                           {datatype, flag},
                                                                           hidden]}.
{mapping, "snmp.agent.config.verbosity", "snmp.agent.config.verbosity", [{default, info},
                                                                         {datatype, atom},
                                                                         hidden]}.
{mapping, "snmp.agent.multi_threaded", "snmp.agent.multi_threaded", [{default, on},
                                                                     {datatype, flag},
                                                                     hidden]}.
{mapping, "snmp.agent.mib_server.mibentry_override", "snmp.agent.mib_server.mibentry_override", [{default, on},
                                                                                                 {datatype, flag},
                                                                                                 hidden]}.
{mapping, "snmp.agent.mib_server.trapentry_override", "snmp.agent.mib_server.trapentry_override", [{default, on},
                                                                                                   {datatype, flag},
                                                                                                   hidden]}.
{mapping, "snmp.agent.mib_server.verbosity", "snmp.agent.mib_server.verbosity", [{default, info},
                                                                                 {datatype, atom},
                                                                                 hidden]}.
{mapping, "snmp.agent.mib_server.cache", "snmp.agent.mib_server.cache", [{default, on},
                                                                         {datatype, flag},
                                                                         hidden]}.
{mapping, "snmp.agent.note_store.timeout", "snmp.agent.note_store.timeout", [{default, 30000},
                                                                             {datatype, integer},
                                                                             hidden]}.
{mapping, "snmp.agent.note_store.verbosity", "snmp.agent.note_store.verbosity", [{default, info},
                                                                                 {datatype, atom},
                                                                                 hidden]}.
{mapping, "snmp.agent.net_if.module", "snmp.agent.net_if.module", [{default, snmpa_net_if},
                                                                   {datatype, atom},
                                                                   hidden]}.
{mapping, "snmp.agent.net_if.verbosity", "snmp.agent.net_if.verbosity", [{default, info},
                                                                         {datatype, atom},
                                                                         hidden]}.
{mapping, "snmp.agent.net_if.options.bind_to", "snmp.agent.net_if.options.bind_to", [{default, off},
                                                                                     {datatype, flag},
                                                                                     hidden]}.
{mapping, "snmp.agent.net_if.options.no_reuse", "snmp.agent.net_if.options.no_reuse", [{default, off},
                                                                                       {datatype, flag},
                                                                                       hidden]}.
{mapping, "snmp.agent.net_if.options.req_limit", "snmp.agent.net_if.options.req_limit", [{default, infinity},
                                                                                         {datatype, atom},
                                                                                         hidden]}.
{mapping, "snmp.agent.audit_trail_log.type", "snmp.agent.audit_trail_log.type", [{default, read_write},
                                                                                 {datatype, atom},
                                                                                 hidden]}.
{mapping, "snmp.agent.audit_trail_log.dir", "snmp.agent.audit_trail_log.dir", [{default, "/tmp"},
                                                                               {datatype, directory},
                                                                               hidden]}.
{mapping, "snmp.agent.audit_trail_log.size", "snmp.agent.audit_trail_log.size", [{default, "{10240,10}"},
                                                                                 {datatype, string},
                                                                                 hidden]}.
{mapping, "snmp.agent.audit_trail_log.repair", "snmp.agent.audit_trail_log.repair", [{default, on},
                                                                                     {datatype, flag},
                                                                                     hidden]}.
{mapping, "snmp.agent.audit_trail_log.seqno", "snmp.agent.audit_trail_log.seqno", [{default, off},
                                                                                   {datatype, flag},
                                                                                   hidden]}.


{translation, "snmp.agent.versions",
 fun(Conf) ->
         Str = cuttlefish:conf_get("snmp.agent.versions", Conf),
         {ok, Scanned,_} = erl_scan:string(Str++"."),
         {ok, Parsed} = erl_parse:parse_exprs(Scanned),
         {value, V, _} = erl_eval:exprs(Parsed,[]),
         case is_list(V) of
             true -> V;
             false -> error(not_applicable_versions)
         end
  end}.

{translation, "snmp.agent.mibs",
  fun(Conf) ->
      Mibs = cuttlefish_variable:filter_by_prefix("snmp.agent.mibs", Conf),
      [ Mib || {_, Mib} <- Mibs]
  end
}.


{translation, "snmp.agent.audit_trail_log.size",
 fun(Conf) ->
         Str = cuttlefish:conf_get("snmp.agent.audit_trail_log.size", Conf),
         {ok, Scanned,_} = erl_scan:string(Str++"."),
         {ok, Parsed} = erl_parse:parse_exprs(Scanned),
         {value, {_,_} = V, _} = erl_eval:exprs(Parsed,[]),
         V
  end}.

%% Exometer
{mapping, "snmp_reporting", "exometer.report", [
                                                          {default, off},
                                                          {datatype, flag},
                                                          hidden
                                                         ]}.

{mapping, "snmp.mib_template", "vmq_exo.snmp.mib_template", [
                                                             {default, "snmp/mibs/EXOMETER-METRICS-MIB.mib"},
                                                             {datatype, file},
                                                             hidden
                                                            ]}.

{mapping, "snmp.mib_dir", "vmq_exo.snmp.mib_dir", [
                                                   {default, "/tmp/vernemq"},
                                                   {datatype, directory},
                                                   hidden
                                                  ]}.

{mapping, "graphite_reporting", "exometer.report", [
                                                              {default, off},
                                                              {datatype, flag},
                                                              hidden
                                                             ]}.

{mapping, "graphite.connect_timeout", "vmq_exo.graphite.connect_timeout", [
                                                                           {default, 5000},
                                                                           {datatype, integer},
                                                                           hidden
                                                                          ]}.

{mapping, "graphite.prefix", "vmq_exo.graphite.prefix", [
                                                         {default, "vernemq"},
                                                         {datatype, string},
                                                         hidden
                                                        ]}.

{mapping, "graphite.port", "vmq_exo.graphite.port", [
                                                     {default, 2008},
                                                     {datatype, integer},
                                                     hidden
                                                    ]}.

{mapping, "graphite.host", "vmq_exo.graphite.host", [
                                                     {default, "carbon.hostedgraphite.com"},
                                                     {datatype, string},
                                                     hidden
                                                    ]}.

{mapping, "graphite.api_key", "vmq_exo.graphite.api_key", [
                                                           {default, "UNDEFINED"},
                                                           {datatype, string},
                                                           hidden
                                                          ]}.

{mapping, "collectd_reporting", "exometer.report", [
                                                              {default, off},
                                                              {datatype, flag},
                                                              hidden
                                                             ]}.

{mapping, "collectd.reconnect_interval", "vmq_exo.collectd.reconnect_interval", [
                                                                                 {default, 10},
                                                                                 {datatype, integer},
                                                                                 hidden
                                                                                ]}.

{mapping, "collectd.refresh_interval", "vmq_exo.collectd.refresh_interval", [
                                                                             {default, 20},
                                                                             {datatype, integer},
                                                                             hidden
                                                                            ]}.

{mapping, "collectd.read_timeout", "vmq_exo.collectd.read_timeout", [
                                                                     {default, 5000},
                                                                     {datatype, integer},
                                                                     hidden
                                                                    ]}.

{mapping, "collectd.connect_timeout", "vmq_exo.collectd.connect_timeout", [
                                                                           {default, 8000},
                                                                           {datatype, integer},
                                                                           hidden
                                                                          ]}.

{mapping, "collectd.hostname", "vmq_exo.collectd.hostname", [
                                                             {default, "testhost"},
                                                             {datatype, string},
                                                             hidden
                                                            ]}.

{mapping, "collectd.path", "vmq_exo.collectd.path", [
                                                     {default, "/var/run/collectd-unixsock"},
                                                     {datatype, string},
                                                     hidden
                                                    ]}.

{mapping, "collectd.plugin_name", "vmq_exo.collectd.plugin_name", [
                                                                   {default, "testname"},
                                                                   {datatype, string},
                                                                   hidden
                                                                  ]}.

{mapping, "collectd.plugin_instance", "vmq_exo.collectd.plugin_instance", [
                                                                           {default, "testnode"},
                                                                           {datatype, string},
                                                                           hidden
                                                                          ]}.

{translation, "exometer.report",
 fun(Conf) ->
         SNMPEnabled =  cuttlefish:conf_get("snmp_reporting", Conf),
         GraphiteEnabled =  cuttlefish:conf_get("graphite_reporting", Conf),
         CollectdEnabled =  cuttlefish:conf_get("collectd_reporting", Conf),
         SNMPReporter =
         case SNMPEnabled of
             true -> 
                 [
                  {exometer_report_snmp, [
                                          {mib_template, cuttlefish:conf_get("snmp.mib_template", Conf)},
                                          {mib_dir, cuttlefish:conf_get("snmp.mib_dir", Conf)}
                                         ]}
                 ];
             false ->
                 []
         end,
         GraphiteReporter =
         case GraphiteEnabled of
             true ->
                 [
                  {exometer_report_graphite, [
                                              {connect_timeout, cuttlefish:conf_get("graphite.connect_timeout", Conf)},
                                              {prefix, cuttlefish:conf_get("graphite.prefix", Conf)},
                                              {host, cuttlefish:conf_get("graphite.host", Conf)},
                                              {port, cuttlefish:conf_get("graphite.port", Conf)},
                                              {api_key, cuttlefish:conf_get("graphite.api_key", Conf)}
                                             ]}
                 ];
             false ->
                 []
         end,
         CollectdReporter =
         case CollectdEnabled of
             true ->
                 [
                  {exometer_report_collectd, [
                                              {reconnect_interval, cuttlefish:conf_get("collectd.reconnect_interval", Conf)},
                                              {refresh_interval, cuttlefish:conf_get("collectd.refresh_interval", Conf)},
                                              {read_timeout, cuttlefish:conf_get("collectd.read_timeout", Conf)},
                                              {connect_timeout, cuttlefish:conf_get("collectd.connect_timeout", Conf)},
                                              {hostname, cuttlefish:conf_get("collectd.hostname", Conf)},
                                              {path, cuttlefish:conf_get("collectd.path", Conf)},
                                              {plugin_name, cuttlefish:conf_get("collectd.plugin_name", Conf)},
                                              {plugin_instance, cuttlefish:conf_get("collectd.plugin_instance", Conf)}
                                             ]}
                 ];
             false ->
                 []
         end,
         Reporters = lists:flatten([SNMPReporter,GraphiteReporter,CollectdReporter]),
         Subscribers = [{apply, {vmq_exo, subscribers, [SNMPEnabled, GraphiteEnabled, CollectdEnabled]}}],
         [{reporters, Reporters},
          {subscribers, Subscribers}]
  end}.
