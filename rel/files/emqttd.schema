%%-*- mode: erlang -*
%% ex: ft=erlang

%% @doc listener.max_connections is an integer or 'infinity' defining 
%% the number of concurrent connections. This option can be overridden
%% by either specifying on the protocol level:
%%
%%     - listener.tcp.max_connections
%%     - listener.ssl.max_connections
%%     - listener.websocket.max_connections 
%%
%% or on the listener level:
%%
%%     - listener.tcp.my_tcp_listener.max_connections
%%     - listener.ssl.my_ssl_listener.max_connections
%%     - listener.websocket.my_websocket_listener.max_connections
{mapping, "listener.max_connections", "emqttd_server.listeners", [
                                                                  {default, {{max_connections}} },
                                                                  {datatype, [integer, {atom, infinity}]}
                                                                 ]}. 

{mapping, "listener.tcp.max_connections", "emqttd_server.listeners", [
                                                                      {default, -1},
                                                                      {datatype, [integer, {atom, infinity}]},
                                                                      hidden
                                                                     ]}. 

{mapping, "listener.tcp.$name.max_connections", "emqttd_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, [integer, {atom, infinity}]},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.ssl.max_connections", "emqttd_server.listeners", [
                                                                      {default, -1},
                                                                      {datatype, [integer, {atom, infinity}]},
                                                                      hidden
                                                                     ]}. 

{mapping, "listener.ssl.$name.max_connections", "emqttd_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, [integer, {atom, infinity}]},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.websocket.max_connections", "emqttd_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, [integer, {atom, infinity}]},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.websocket.$name.max_connections", "emqttd_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, [integer, {atom, infinity}]},
                                                                                  hidden
                                                                                 ]}. 
%% @doc listener.tcp.<name> is an IP address and TCP port that 
%% the broker will bind. You can define multiple listeners e.g:
%% - listener.tcp.default = 127.0.0.1:1883
%% - listener.tcp.internal = 127.0.0.1:10883
%% - listener.tcp.my_other_listener = 127.0.0.1:10884
%% This also works for SSL listeners and Websocket handlers:
%% - listener.ssl.default = 127.0.0.1:8883
%% - listener.websocket.default = 127.0.0.1:800 
{mapping, "listener.tcp.$name", "emqttd_server.listeners", [
                                                            {default, { "{{mqtt_default_ip}}", {{mqtt_default_port}} }},
                                                            {datatype, ip},
                                                            {include_default, "default"}
                                                           ]}.

{mapping, "listener.websocket.$name", "emqttd_server.listeners", [
                                                                  {default, { "{{mqtt_default_ws_ip}}", {{mqtt_default_ws_port}} }},
                                                                  {commented, { "{{mqtt_default_ws_ip}}", {{mqtt_default_ws_port}} }},
                                                                  {datatype, ip},
                                                                  {include_default, "default"}
                                                                 ]}.

{mapping, "listener.ssl.$name", "emqttd_server.listeners", [
                                                            {default, { "{{mqtt_default_ip}}", {{mqtt_default_port}} }},
                                                            {commented, { "{{mqtt_default_ip}}", {{mqtt_default_port}} }},
                                                            {datatype, ip},
                                                            {include_default, "default"}
                                                           ]}.

%% @doc Set the nr of acceptors waiting to concurrently accept new connections.
%% This can be specified either on the protocol level:
%%
%%     - listener.tcp.nr_of_acceptors
%%     - listener.ssl.nr_of_acceptors
%%     - listener.websocket.nr_of_acceptors 
%%
%% or on the listener level:
%%
%%     - listener.tcp.my_tcp_listener.nr_of_acceptors
%%     - listener.ssl.my_ssl_listener.nr_of_acceptors
%%     - listener.websocket.my_websocket_listener.nr_of_acceptors
{mapping, "listener.nr_of_acceptors", "emqttd_server.listeners", [
                                                                  {default, {{ max_nr_of_acceptors}} },
                                                                  {datatype, integer}
                                                                 ]}.

{mapping, "listener.tcp.nr_of_acceptors", "emqttd_server.listeners", [
                                                                      {default, -1},
                                                                      {datatype, integer},
                                                                      hidden
                                                                     ]}. 

{mapping, "listener.tcp.$name.nr_of_acceptors", "emqttd_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, integer},
                                                                            {include_default, "default"},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.ssl.nr_of_acceptors", "emqttd_server.listeners", [
                                                                      {default, -1},
                                                                      {datatype, integer},
                                                                      hidden
                                                                     ]}. 

{mapping, "listener.ssl.$name.nr_of_acceptors", "emqttd_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, integer},
                                                                            {include_default, "default"},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.websocket.nr_of_acceptors", "emqttd_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, integer},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.websocket.$name.nr_of_acceptors", "emqttd_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, integer},
                                                                                  {include_default, "default"},
                                                                                  hidden
                                                                                 ]}. 


%% @doc Set the mountpoint on the protocol level or on the listener level
%%
%%     - listener.tcp.mountpoint
%%     - listener.ssl.mountpoint
%%     - listener.websocket.mountpoint 
%%
%% or on the listener level:
%%
%%     - listener.tcp.my_tcp_listener.mountpoint
%%     - listener.ssl.my_ssl_listener.mountpoint
%%     - listener.websocket.my_ssl_listener.mountpoint
{mapping, "listener.mountpoint", "emqttd_server.listeners", [{default, "off"},
                                                             {datatype, string}
                                                            ]}. 
{mapping, "listener.tcp.mountpoint", "emqttd_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 

{mapping, "listener.tcp.$name.mountpoint", "emqttd_server.listeners", [
                                                                       {default, ""},
                                                                       {datatype, string},
                                                                       hidden
                                                                      ]}. 

{mapping, "listener.websocket.mountpoint", "emqttd_server.listeners", [
                                                                       {default, ""},
                                                                       {datatype, string},
                                                                       hidden
                                                                      ]}. 

{mapping, "listener.websocket.$name.mountpoint", "emqttd_server.listeners", [
                                                                             {default, ""},
                                                                             {datatype, string},
                                                                             hidden
                                                                            ]}. 

{mapping, "listener.ssl.mountpoint", "emqttd_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 

{mapping, "listener.ssl.$name.mountpoint", "emqttd_server.listeners", [
                                                                       {default, ""},
                                                                       {datatype, string},
                                                                       hidden
                                                                      ]}. 

{mapping, "listener.ssl.cafile", "emqttd_server.listeners", [
                                                             {default, ""},
                                                             {datatype, file},
                                                             {commented, "{{platform_etc_dir}}/cacerts.pem"}
                                                            ]}. 

{mapping, "listener.ssl.$name.cafile", "emqttd_server.listeners", [
                                                                   {default, ""},
                                                                   {datatype, string},
                                                                   hidden
                                                                  ]}. 

{mapping, "listener.ssl.certfile", "emqttd_server.listeners", [
                                                               {default, ""},
                                                               {datatype, file},
                                                               {commented, "{{platform_etc_dir}}/cert.pem"}
                                                              ]}. 
{mapping, "listener.ssl.$name.certfile", "emqttd_server.listeners", [
                                                                     {default, ""},
                                                                     {datatype, file},
                                                                     hidden
                                                                    ]}. 
{mapping, "listener.ssl.ciphers", "emqttd_server.listeners", [
                                                              {default, ""},
                                                              {datatype, string},
                                                              hidden
                                                             ]}. 
{mapping, "listener.ssl.$name.ciphers", "emqttd_server.listeners", [
                                                              {default, ""},
                                                                    {datatype, string},
                                                                    hidden
                                                                   ]}. 
{mapping, "listener.ssl.crlfile", "emqttd_server.listeners", [
                                                              {default, ""},
                                                              {datatype, string},
                                                              {commented, ""}
                                                             ]}. 
{mapping, "listener.ssl.$name.crlfile", "emqttd_server.listeners", [
                                                                    {default, ""},
                                                                    {datatype, string},
                                                                    hidden
                                                                   ]}. 
{mapping, "listener.ssl.keyfile", "emqttd_server.listeners", [
                                                              {default, ""},
                                                              {datatype, file},
                                                              {commented, "{{platform_etc_dir}}/key.pem"}
                                                             ]}. 
{mapping, "listener.ssl.$name.keyfile", "emqttd_server.listeners", [
                                                                    {default, ""},
                                                                    {datatype, file},
                                                                    hidden
                                                                   ]}. 
{mapping, "listener.ssl.require_certificate", "emqttd_server.listeners", [
                                                                          {default, off},
                                                                          {datatype, flag},
                                                                          {commented, off}
                                                                         ]}. 
{mapping, "listener.ssl.$name.require_certificate", "emqttd_server.listeners", [
                                                                                {datatype, flag},
                                                                                hidden
                                                                               ]}. 
{mapping, "listener.ssl.tls_version", "emqttd_server.listeners", [
                                                                  {default, 'tlsv1.2'},
                                                                  {datatype, atom},
                                                                  {commented, 'tlsv1.2'}
                                                                 ]}. 
{mapping, "listener.ssl.$name.tls_version", "emqttd_server.listeners", [
                                                                        {datatype, atom},
                                                                        hidden
                                                                       ]}. 
{mapping, "listener.ssl.use_identity_as_username", "emqttd_server.listeners", [
                                                                               {default, off},
                                                                               {datatype, flag},
                                                                               {commented, off}
                                                                              ]}. 
{mapping, "listener.ssl.$name.use_identity_as_username", "emqttd_server.listeners", [
                                                                                     {datatype, flag},
                                                                                     hidden
                                                                                    ]}. 
{mapping, "listener.ssl.psk_hint", "emqttd_server.listeners", [
                                                               {default, ""},
                                                               {datatype, string},
                                                               {commented, ""}
                                                              ]}. 
{mapping, "listener.ssl.$name.psk_hint", "emqttd_server.listeners", [
                                                                     {datatype, string},
                                                                     hidden
                                                                    ]}. 
{mapping, "listener.ssl.support_elliptic_curves", "emqttd_server.listeners", [
                                                               {default, on},
                                                               {datatype, flag},
                                                               hidden
                                                              ]}. 
{mapping, "listener.ssl.$name.support_elliptic_curves", "emqttd_server.listeners", [
                                                                     {datatype, flag},
                                                                     hidden
                                                                    ]}. 


{translation, "emqttd_server.listeners", 
 fun(Conf) ->
         %% cuttlefish messes up with the tree-like configuration style if
         %% it cannot find either configured values or defaults in the 
         %% more specific leafs of the tree. That's why we always provide
         %% a default value and take care of them by ourselfs.
         InfIntVal = fun(Name, Val1, Def) -> 
                             case Val1 of
                                 infinity -> infinity;
                                 undefined -> Def;
                                 -1 -> Def;
                                 Int when is_integer(Int) -> Int;
                                 _ -> cuttlefish:invalid(Name ++ "  should be an integer")
                             end
                     end,
         MPVal = fun(Name, Val2, Def) -> case Val2 of
                                             "off" -> "";
                                             "" -> Def;
                                             S when is_list(S) -> S;
                                             _ -> cuttlefish:invalid(Name ++ "should be a string")
                                         end
                 end,

         StrVal = fun(_, "", Def) -> Def;
                     (_, S, _) when is_list(S) -> S;
                     (_, undefined, Def) -> Def end,
         BoolVal = fun(_, B, _) when is_boolean(B) -> B;
                      (_, undefined, Def) -> Def end,
         AtomVal = fun(_, A, _) when is_atom(A) -> A end,


         Mappings = ["max_connections", "nr_of_acceptors", "mountpoint"],
                    %% SSL specific
         SSLMapps = ["cafile", "capath", "certfile", "ciphers", "crlfile",
                     "keyfile", "require_certificate", "tls_version",
                     "use_identity_as_username", "psk_hint", "support_elliptic_curves"],
         F = fun(Prefix, Suffix, Val) ->
                     %% get default from root of the tree
                     Default1 =
                     case lists:member(Suffix, SSLMapps) of
                         true -> 
                             undefined;
                         false ->
                            cuttlefish:conf_get(lists:flatten(["listener.", Suffix]), Conf)
                     end,
                     Default2 = cuttlefish:conf_get(lists:flatten([Prefix, ".", Suffix]), Conf, Default1),
                     %% get the name value pairs
                     Prefix3 = lists:flatten([Prefix, ".$name"]),
                     [begin
                          Prefix4 = lists:flatten([Prefix, ".", Name, ".", Suffix]),
                          V = Val(Name, cuttlefish:conf_get(Prefix4, Conf, Default2), 
                                  Val(Name, Default2, 
                                      Val(Name, Default1, undefined))),
                          {AddrPort, {list_to_atom(Suffix), V}}
                      end 
                      || {[_, _, Name], AddrPort} <- lists:filter(
                                                            fun({K, _V}) ->
                                                                    cuttlefish_variable:is_fuzzy_match(K, string:tokens(Prefix3, "."))
                                                            end, Conf), not lists:member(Name, Mappings ++ SSLMapps)]
             end,

         MZip = fun([H|_] = ListOfLists) ->
                        Size = length(H), %% get default size
                        ListOfLists = [L || L <- ListOfLists, length(L) == Size],
                        [
                           lists:reverse(
                             lists:foldl(
                               fun(L, Acc) ->
                                       [lists:nth(I, L)|Acc]
                               end, [], ListOfLists))
                         || I <- lists:seq(1, Size)]
                end,

         {TCPIPs, TCPMaxConns} = lists:unzip(F("listener.tcp", "max_connections", InfIntVal)),
         {SSLIPs, SSLMaxConns} = lists:unzip(F("listener.ssl", "max_connections", InfIntVal)),
         {WSIPs, WSMaxConns} = lists:unzip(F("listener.websocket", "max_connections", InfIntVal)),
         
         {TCPIPs, TCPNrOfAcceptors} = lists:unzip(F("listener.tcp", "nr_of_acceptors", InfIntVal)),
         {SSLIPs, SSLNrOfAcceptors} = lists:unzip(F("listener.ssl", "nr_of_acceptors", InfIntVal)),
         {WSIPs, WSNrOfAcceptors} = lists:unzip(F("listener.websocket", "nr_of_acceptors", InfIntVal)),

         {TCPIPs, TCPMountPoint} = lists:unzip(F("listener.tcp", "mountpoint", MPVal)),
         {SSLIPs, SSLMountPoint} = lists:unzip(F("listener.ssl", "mountpoint", MPVal)),
         {WSIPs, WSMountPoint} = lists:unzip(F("listener.websocket", "mountpoint", MPVal)),

         % SSL
         {SSLIPs, SSLCAFiles} = lists:unzip(F("listener.ssl", "cafile", StrVal)),
         {SSLIPs, SSLCAPaths} = lists:unzip(F("listener.ssl", "capath", StrVal)),
         {SSLIPs, SSLCertFiles} = lists:unzip(F("listener.ssl", "certfile", StrVal)),
         {SSLIPs, SSLCiphers} = lists:unzip(F("listener.ssl", "ciphers", StrVal)),
         {SSLIPs, SSLCrlFiles} = lists:unzip(F("listener.ssl", "crlfile", StrVal)),
         {SSLIPs, SSLKeyFiles} = lists:unzip(F("listener.ssl", "keyfile", StrVal)),
         {SSLIPs, SSLRequireCerts} = lists:unzip(F("listener.ssl", "require_certificate", BoolVal)),
         {SSLIPs, SSLVersions} = lists:unzip(F("listener.ssl", "tls_version", AtomVal)),
         {SSLIPs, SSLUseIdents} = lists:unzip(F("listener.ssl", "use_identity_as_username", BoolVal)),
         {SSLIPs, SSLPSKHints} = lists:unzip(F("listener.ssl", "psk_hint", StrVal)),
         {SSLIPs, SSLECSupport} = lists:unzip(F("listener.ssl", "support_elliptic_curves", BoolVal)),

         TCP = lists:zip(TCPIPs, MZip([TCPMaxConns, 
                                       TCPNrOfAcceptors, 
                                       TCPMountPoint])),
         WS = lists:zip(WSIPs, MZip([WSMaxConns, 
                                     WSNrOfAcceptors, 
                                     WSMountPoint])),
         SSL = lists:zip(SSLIPs, MZip([SSLMaxConns, 
                                       SSLNrOfAcceptors,
                                       SSLMountPoint,
                                       SSLCAFiles, 
                                       SSLCAPaths, 
                                       SSLCertFiles, 
                                       SSLCiphers, 
                                       SSLCrlFiles, 
                                       SSLKeyFiles, 
                                       SSLRequireCerts, 
                                       SSLVersions, 
                                       SSLUseIdents, 
                                       SSLPSKHints,
                                       SSLECSupport])),
         DropUndef = fun(L) ->
                             [{K, [I || {_, V} = I  <- SubL, V /= undefined]} || {K, SubL} <- L]
                     end,
         {DropUndef(TCP), DropUndef(SSL), DropUndef(WS)}
 end
}.

%% @doc Set the mountpoint on the protocol level or on the listener level
%%
%%     - listener.tcp.mountpoint
%%     - listener.ssl.mountpoint
%%     - listener.websocket.mountpoint 
%%
%% or on the listener level:
%%
%%     - listener.tcp.my_tcp_listener.mountpoint
%%     - listener.ssl.my_ssl_listener.mountpoint
%%     - listener.websocket.my_ssl_listener.mountpoint

{mapping, "bridge.tcp.$name", "emqttd_bridge.config", [
                                                       {default, {"127.0.0.1", 1889}},
                                                       {datatype, ip},
                                                       {include_default, "br0"},
                                                       {commented, "127.0.0.1:1889"}
                                                      ]}. 

{mapping, "bridge.tcp.$name.cleansession", "emqttd_bridge.config", [
                                                       {default, off},
                                                       {datatype, flag},
                                                       {include_default, "br0"},
                                                       {commented, off}
                                                      ]}. 

{mapping, "bridge.tcp.$name.client_id", "emqttd_bridge.config", [
                                                       {default, "auto"},
                                                       {datatype, string},
                                                       {include_default, "br0"},
                                                       {commented, "auto"}
                                                      ]}. 

{mapping, "bridge.tcp.$name.keepalive_interval", "emqttd_bridge.config", [
                                                       {default, 60},
                                                       {datatype, integer},
                                                       {include_default, "br0"},
                                                       {commented, 60}
                                                      ]}. 

{mapping, "bridge.tcp.$name.username", "emqttd_bridge.config", [
                                                       {datatype, string},
                                                       {include_default, "br0"},
                                                       {commented, "my_remote_user"}
                                                      ]}. 

{mapping, "bridge.tcp.$name.password", "emqttd_bridge.config", [
                                                       {datatype, string},
                                                       {include_default, "br0"},
                                                       {commented, "my_remote_password"}
                                                      ]}. 

{mapping, "bridge.tcp.$name.topic.$topic_id", "emqttd_bridge.config", [
                                                       {datatype, string},
                                                       {include_default, "1"}
                                                      ]}. 

{mapping, "bridge.tcp.$name.restart_timeout", "emqttd_bridge.config", [
                                                                       {datatype, integer},
                                                                       {default, 10},
                                                                       {include_default, "br0"},
                                                                       {commented, 10}
                                                                      ]}.

{mapping, "bridge.tcp.$name.try_private", "emqttd_bridge.config", [
                                                                       {datatype, flag},
                                                                       {default, on},
                                                                       {include_default, "br0"},
                                                                       {commented, on}
                                                                      ]}.
%%%%%% --------------------------
{mapping, "bridge.ssl.$name", "emqttd_bridge.config", [
                                                       {default, {"127.0.0.1", 1889}},
                                                       {datatype, ip},
                                                       {include_default, "sbr0"},
                                                       {commented, "127.0.0.1:1889"}
                                                      ]}. 

{mapping, "bridge.ssl.$name.cleansession", "emqttd_bridge.config", [
                                                       {default, off},
                                                       {datatype, flag},
                                                       {include_default, "sbr0"},
                                                       {commented, off}
                                                      ]}. 

{mapping, "bridge.ssl.$name.client_id", "emqttd_bridge.config", [
                                                       {default, "auto"},
                                                       {datatype, string},
                                                       {include_default, "sbr0"},
                                                       {commented, "auto"}
                                                      ]}. 

{mapping, "bridge.ssl.$name.keepalive_interval", "emqttd_bridge.config", [
                                                       {default, 60},
                                                       {datatype, integer},
                                                       {include_default, "sbr0"},
                                                       {commented, 60}
                                                      ]}. 

{mapping, "bridge.ssl.$name.username", "emqttd_bridge.config", [
                                                       {datatype, string},
                                                       {include_default, "sbr0"},
                                                       {commented, "my_remote_user"}
                                                      ]}. 

{mapping, "bridge.ssl.$name.password", "emqttd_bridge.config", [
                                                       {datatype, string},
                                                       {include_default, "sbr0"},
                                                       {commented, "my_remote_password"}
                                                      ]}. 

{mapping, "bridge.ssl.$name.topic.$topic_id", "emqttd_bridge.config", [
                                                       {datatype, string},
                                                       {include_default, "sbr0"},
                                                       {commented, "/demo/+ both 1"}
                                                      ]}. 

{mapping, "bridge.ssl.$name.restart_timeout", "emqttd_bridge.config", [
                                                                       {datatype, integer},
                                                                       {default, 10},
                                                                       {include_default, "sbr0"},
                                                                       {commented, 10}
                                                                      ]}.

{mapping, "bridge.ssl.$name.try_private", "emqttd_bridge.config", [
                                                                   {datatype, flag},
                                                                   {default, on},
                                                                   {include_default, "sbr0"},
                                                                   {commented, on}
                                                                  ]}.
%%%%%% --------------------------
{mapping, "bridge.ssl.$name.cafile", "emqttd_bridge.config", [
                                                              {default, ""},
                                                              {datatype, file},
                                                              {include_default, "sbr0"},
                                                              {commented, "{{platform_etc_dir}}/cacerts.pem"}
                                                             ]}. 
{mapping, "bridge.ssl.$name.capath", "emqttd_bridge.config", [
                                                              {default, ""},
                                                              {datatype, file},
                                                              {include_default, "sbr0"},
                                                              {commented, "{{platform_etc_dir}}/cacerts"}
                                                             ]}. 
{mapping, "bridge.ssl.$name.certfile", "emqttd_bridge.config", [
                                                                {default, ""},
                                                                {datatype, file},
                                                                {include_default, "sbr0"},
                                                                {commented, "{{platform_etc_dir}}/cert.pem"}
                                                               ]}. 
{mapping, "bridge.ssl.$name.keyfile", "emqttd_bridge.config", [
                                                               {default, ""},
                                                               {datatype, file},
                                                               {include_default, "sbr0"},
                                                               {commented, "{{platform_etc_dir}}/key.pem"}
                                                              ]}. 

{mapping, "bridge.ssl.$name.insecure", "emqttd_bridge.config", [
                                                                {default, off},
                                                                {datatype, flag},
                                                                {include_default, "sbr0"},
                                                                {commented, off}
                                                               ]}. 
{mapping, "bridge.ssl.$name.tls_version", "emqttd_bridge.config", [
                                                                   {default, 'tlsv1.2'},
                                                                   {datatype, atom},
                                                                   {include_default, "sbr0"},
                                                                   {commented, 'tlsv1.2'}
                                                                  ]}. 
{mapping, "bridge.ssl.$name.identity", "emqttd_bridge.config", [
                                                                {default, ""},
                                                                {datatype, string},
                                                                {include_default, "sbr0"},
                                                                {commented, ""}
                                                               ]}. 
{mapping, "bridge.ssl.$name.psk", "emqttd_bridge.config", [
                                                           {default, ""},
                                                           {datatype, string},
                                                           {include_default, "sbr0"},
                                                           {commented, ""}
                                                          ]}. 

{mapping, "bridge.registry_mfa", "emqttd_bridge.registry_mfa", 
 [
  {default, "{emqttd_reg,direct_plugin_exports,[emqttd_bridge]}"},
  {datatype, string},
  hidden
 ]}. 

{translation, "emqttd_bridge.registry_mfa", 
 fun(Conf) ->
         S = cuttlefish:conf_get("bridge.registry_mfa", Conf),
         {ok, T, _} = erl_scan:string(S ++ "."),
         {ok, Term} = erl_parse:parse_term(T),
         Term
 end}.

{translation, "emqttd_bridge.config", 
 fun(Conf) ->
         BoolVal = fun(_, B) when is_boolean(B) -> B end,
         StringVal = fun(_, "") -> undefined;
                        (_, S) when is_list(S) -> S; 
                        (_, undefined) -> undefined end,
         IntVal = fun(_, I) when is_integer(I) -> I;
                     (_, undefined) -> undefined end,
         AtomVal = fun(_, A) when is_atom(A) -> A end,
         ClientIdVal = fun(Name, "auto") -> 
                               {ok, HostName} = inet:gethostname(),
                               lists:flatten([HostName, ".", Name]);
                          (_, L) when is_list(L) -> L
                       end,

         TopicVal = fun
                        (_, TopicString) when is_list(TopicString) ->
                            TTopicString = re:replace(TopicString, "\\*", "#", [{return, list}]),
                            Directions = ["out", "in", "both"],
                            QoSs = ["0", "1", "2"],
                            [Pattern|Rest0] = string:tokens(TTopicString, " "),
                            case Rest0 of
                                [MaybeDirection|Rest1] ->
                                    {Direction, Rest2} =
                                    case lists:member(MaybeDirection, Directions) of
                                        true -> 
                                            {list_to_atom(MaybeDirection), Rest1};
                                        false ->
                                            {out, Rest0}
                                    end,
                                    {QoS, Rest3} =
                                    case Rest2 of
                                        [] ->
                                            {0, []};
                                        [MaybeQoS|Rest4] ->
                                            case lists:member(MaybeQoS, QoSs) of
                                                true ->
                                                    {list_to_integer(MaybeQoS), Rest4};
                                                false ->
                                                    {0, Rest4}
                                            end
                                    end,
                                    case Rest3 of
                                        [] ->
                                            {Pattern, Direction, QoS, "", ""};
                                        [LocalPrefix, RemotePrefix] ->
                                            {Pattern, Direction, QoS, LocalPrefix, RemotePrefix};
                                        _ ->
                                            cuttlefish:invalid("should be a string of the form 'pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]'")
                                    end;
                                [] ->
                                    {Pattern, out, 0, "", ""}
                            end;
                        (_, _) ->
                            cuttlefish:invalid("should be a string of the form 'pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]'")
                    end,

         Mappings = ["clean_session", "client_id", "keepalive_interval", 
                    "username", "password", "restart_timeout", "try_private", "topic"],
                    %% SSL specific
         SSLMapps = ["cafile", "capath", "certfile", "keyfile", "insecure", "tls_version", "identity", "psk"],
         F = fun(Prefix, Suffix, Validator) ->
                     %% get the name value pairs
                     Prefix3 = lists:flatten([Prefix, ".$name"]),
                     [begin
                          case lists:prefix("topic", Suffix) of
                              true ->
                                  BrConfigs =
                                  [begin
                                       P = lists:flatten(
                                             [Prefix, ".", Name, ".topic.", integer_to_list(I)]
                                            ), 
                                       cuttlefish:conf_get(P, Conf, undefined)
                                   end || I <- lists:seq(1,100)],
                                  {AddrPort, {topics, [Validator(Name, C) || C <- BrConfigs, C /= undefined]}};
                              false ->
                                  Prefix4 = lists:flatten([Prefix, ".", Name, ".", Suffix]),
                                  Val = Validator(Name, cuttlefish:conf_get(Prefix4, Conf, undefined)),
                                  {AddrPort, {list_to_atom(Suffix), Val}}
                          end
                      end 
                      || {[_, _, Name], AddrPort} <- lists:filter(
                                                            fun({K, _V}) ->
                                                                    cuttlefish_variable:is_fuzzy_match(K, string:tokens(Prefix3, "."))
                                                            end, Conf), not lists:member(Name, Mappings ++ SSLMapps)]
             end,

         MZip = fun([H|_] = ListOfLists) ->
                        Size = length(H), %% get default size
                        ListOfLists = [L || L <- ListOfLists, length(L) == Size],
                        [
                           lists:reverse(
                             lists:foldl(
                               fun(L, Acc) ->
                                       [lists:nth(I, L)|Acc]
                               end, [], ListOfLists))
                         || I <- lists:seq(1, Size)]
                end,

         {TCPIPs, TCPCleanSessions} = lists:unzip(F("bridge.tcp", "cleansession", BoolVal)),
         {TCPIPs, TCPClientIds} = lists:unzip(F("bridge.tcp", "client_id", ClientIdVal)),
         {TCPIPs, TCPKeepAlive} = lists:unzip(F("bridge.tcp", "keepalive_interval", IntVal)),
         {TCPIPs, TCPUserNames} = lists:unzip(F("bridge.tcp", "username", StringVal)),
         {TCPIPs, TCPPasswords} = lists:unzip(F("bridge.tcp", "password", StringVal)),
         {TCPIPs, TCPRestartTimeouts} = lists:unzip(F("bridge.tcp", "restart_timeout", IntVal)),
         {TCPIPs, TCPTryPrivates} = lists:unzip(F("bridge.tcp", "try_private", BoolVal)),
         {TCPIPs, TCPTopics} = lists:unzip(lists:usort(F("bridge.tcp", "topic", TopicVal))),

         {SSLIPs, SSLCleanSessions} = lists:unzip(F("bridge.ssl", "cleansession", BoolVal)),
         {SSLIPs, SSLClientIds} = lists:unzip(F("bridge.ssl", "client_id", ClientIdVal)),
         {SSLIPs, SSLKeepAlive} = lists:unzip(F("bridge.ssl", "keepalive_interval", IntVal)),
         {SSLIPs, SSLUserNames} = lists:unzip(F("bridge.ssl", "username", StringVal)),
         {SSLIPs, SSLPasswords} = lists:unzip(F("bridge.ssl", "password", StringVal)),
         {SSLIPs, SSLRestartTimeouts} = lists:unzip(F("bridge.ssl", "restart_timeout", IntVal)),
         {SSLIPs, SSLTryPrivates} = lists:unzip(F("bridge.ssl", "try_private", BoolVal)),
         {SSLIPs, SSLTopics} = lists:unzip(lists:usort(F("bridge.ssl", "topic", TopicVal))),

         % SSL
         {SSLIPs, SSLCAFiles} = lists:unzip(F("bridge.ssl", "cafile", StringVal)),
         {SSLIPs, SSLCAPaths} = lists:unzip(F("bridge.ssl", "capath", StringVal)),
         {SSLIPs, SSLCertFiles} = lists:unzip(F("bridge.ssl", "certfile", StringVal)),
         {SSLIPs, SSLKeyFiles} = lists:unzip(F("bridge.ssl", "keyfile", StringVal)),
         {SSLIPs, SSLInsecures} = lists:unzip(F("bridge.ssl", "insecure", BoolVal)),
         {SSLIPs, SSLVersions} = lists:unzip(F("bridge.ssl", "tls_version", AtomVal)),
         {SSLIPs, SSLIdentities} = lists:unzip(F("bridge.ssl", "identity", StringVal)),
         {SSLIPs, SSLPSKs} = lists:unzip(F("bridge.ssl", "psk", StringVal)),

         TCP = lists:zip(TCPIPs, MZip([TCPCleanSessions, 
                                       TCPClientIds, 
                                       TCPKeepAlive, 
                                       TCPRestartTimeouts,
                                       TCPUserNames, 
                                       TCPPasswords,
                                       TCPTryPrivates,
                                       TCPTopics])), 

         SSL = lists:zip(SSLIPs, MZip([SSLCleanSessions, 
                                       SSLClientIds, 
                                       SSLKeepAlive, 
                                       SSLRestartTimeouts,
                                       SSLUserNames, 
                                       SSLPasswords,
                                       SSLTryPrivates,
                                       SSLTopics,
                                       SSLCAFiles, 
                                       SSLCAPaths, 
                                       SSLCertFiles, 
                                       SSLKeyFiles, 
                                       SSLInsecures, 
                                       SSLVersions, 
                                       SSLIdentities, 
                                       SSLPSKs])),
         DropUndef = fun(L) ->
                             [{K, [I || {_, V} = I  <- SubL, V /= undefined]} || {K, SubL} <- L]
                     end,
         {DropUndef(TCP), DropUndef(SSL)}
 end
}.

%% @doc Set the path to an access control list file. 
{mapping, "acl_file", "emqttd_acl.file", [
                                          {default, "{{platform_etc_dir}}/emqttd.acl"},
                                          {datatype, file}
                                         ]}.

%% @doc Set the path to a password file. 
{mapping, "password_file", "emqttd_passwd.file", [
                                                  {default, "{{platform_etc_dir}}/emqttd.passwd"},
                                                  {datatype, file}
                                                 ]}.

%% @doc Allow anonymous users to connect, default is 'off'
{mapping, "allow_anonymous", "emqttd_passwd.allow_anonymous", [
                                                               {default, off},
                                                               {datatype, flag}
                                                              ]}.

%% @doc Set the max size for client ids, MQTT v3.1 specifies the
%% limit of 23 characterd
{mapping, "max_client_id_size", "emqttd_server.max_client_id_size", [
                                                               {default, 23},
                                                               {commented, 23},
                                                               {datatype, integer}
                                                              ]}.
%% @doc Set the time in seconds after a QoS=1 or QoS=2 message has been sent
%% that emqttd will wait before retrying when no response is received.
{mapping, "retry_interval", "emqttd_server.retry_interval", [
                                                             {default, 20},
                                                             {commented, 20},
                                                             {datatype, integer}
                                                            ]}.


{mapping, "table_definition_mod", "mnesia_cluster.table_definition_mod", [
                                                                          {default, "{emqttd_reg,emqttd_table_defs,[]}"},
                                                                          {datatype, string},
                                                                          hidden
                                                                         ]}. 

{mapping, "cluster_monitor_callbacks", "mnesia_cluster.cluster_monitor_callbacks", [
                                                                          {default, "[emqttd_cluster]"},
                                                                          {datatype, string},
                                                                          hidden
                                                                         ]}. 

{mapping, "app_process", "mnesia_cluster.app_process", [
                                                                          {default, emqttd_cluster},
                                                                          {datatype, atom},
                                                                          hidden
                                                                         ]}. 

{translation, "mnesia_cluster.table_definition_mod", 
 fun(Conf) ->
         S = cuttlefish:conf_get("table_definition_mod", Conf),
         {ok, T, _} = erl_scan:string(S ++ "."),
         {ok, Term} = erl_parse:parse_term(T),
         Term
 end}.

{translation, "mnesia_cluster.cluster_monitor_callbacks", 
 fun(Conf) ->
         S = cuttlefish:conf_get("cluster_monitor_callbacks", Conf),
         {ok, T, _} = erl_scan:string(S ++ "."),
         {ok, Term} = erl_parse:parse_term(T),
         Term
 end}.


{mapping, "auth_plugin.on_publish.$name", "emqttd_lua.on_publish", [
                                                                    {default, ""},
                                                                    {datatype, file},
                                                                    hidden
                                                                   ]}.

{mapping, "auth_plugin.on_subscribe.$name", "emqttd_lua.on_subscribe", [
                                                                    {default, ""},
                                                                    {datatype, file},
                                                                    hidden
                                                                   ]}.

{mapping, "auth_plugin.on_register.$name", "emqttd_lua.on_register", [
                                                                    {default, ""},
                                                                    {datatype, file},
                                                                    hidden
                                                                   ]}.

{translation, "emqttd_lua.on_publish",
 fun(Conf) ->
      Scripts = cuttlefish_variable:filter_by_prefix("auth_plugin.on_publish", Conf),
      [ Script || {_, Script} <- Scripts]
  end}.

{translation, "emqttd_lua.on_subscribe",
 fun(Conf) ->
      Scripts = cuttlefish_variable:filter_by_prefix("auth_plugin.on_subscribe", Conf),
      [ Script || {_, Script} <- Scripts]
  end}.

{translation, "emqttd_lua.on_register",
 fun(Conf) ->
      Scripts = cuttlefish_variable:filter_by_prefix("auth_plugin.on_register", Conf),
      [ Script || {_, Script} <- Scripts]
  end}.


%% @doc Where to emit the default log messages (typically at 'info'
%% severity):
%%      off: disabled
%%     file: the file specified by log.console.file
%%  console: to standard output (seen when using `emqttd attach-direct`)
%%     both: log.console.file and standard out.
{mapping, "log.console", "lager.handlers", [
                                            {default, {{console_log_default}} },
                                            {datatype, {enum, [off, file, console, both]}}
                                           ]}.
%% @doc The severity level of the console log, default is 'info'.
{mapping, "log.console.level", "lager.handlers", [
                                                  {default, info},
                                                  {datatype, {enum, [debug, info, warning, error]}}
                                                 ]}.
%% @doc When 'log.console' is set to 'file' or 'both', the file where
%% console messages will be logged.
{mapping, "log.console.file", "lager.handlers", [
                                                 {default, "{{platform_log_dir}}/console.log"},
                                                 {datatype, file}
                                                ]}.
%% @doc The file where error messages will be logged.
{mapping, "log.error.file", "lager.handlers", [
                                               {default, "{{platform_log_dir}}/error.log"},
                                               {datatype, file}
                                              ]}.
%% @doc When set to 'on', enables log output to syslog.
{mapping, "log.syslog", "lager.handlers", [
                                           {default, off},
                                           {datatype, flag}
                                          ]}.
{translation,
 "lager.handlers",
 fun(Conf) ->
         SyslogHandler = [{lager_syslog_backend, ["emqttd", daemon, info]} ||
                          cuttlefish:conf_get("log.syslog", Conf)],
         ErrorHandler = case cuttlefish:conf_get("log.error.file", Conf) of
                            undefined -> [];
                            ErrorFilename -> [{lager_file_backend, [{file, ErrorFilename},
                                                                    {level, error},
                                                                    {size, 10485760},
                                                                    {date, "$D0"},
                                                                    {count, 5}]}]
                        end,
         ConsoleLogLevel = cuttlefish:conf_get("log.console.level", Conf),
         ConsoleLogFile = cuttlefish:conf_get("log.console.file", Conf),
         ConsoleHandler = {lager_console_backend, ConsoleLogLevel},
         ConsoleFileHandler = {lager_file_backend, [{file, ConsoleLogFile},
                                                    {level, ConsoleLogLevel},
                                                    {size, 10485760},
                                                    {date, "$D0"},
                                                    {count, 5}]},
         ConsoleHandlers = case cuttlefish:conf_get("log.console", Conf) of
                               off -> [];
                               file -> [ConsoleFileHandler];
                               console -> [ConsoleHandler];
                               both -> [ConsoleHandler, ConsoleFileHandler];
                               _ -> []
                           end,
         SyslogHandler ++ ConsoleHandlers ++ ErrorHandler
 end
}.
%% @doc Whether to enable Erlang's built-in error logger.
{mapping, "sasl", "sasl.sasl_error_logger", [
                                             {default, off},
                                             {datatype, flag},
                                             hidden
                                            ]}.
%% @doc Whether to enable the crash log.
{mapping, "log.crash", "lager.crash_log", [
                                           {default, on},
                                           {datatype, flag}
                                          ]}.
%% @doc If the crash log is enabled, the file where its messages will
%% be written.
{mapping, "log.crash.file", "lager.crash_log", [
                                                {default, "{{platform_log_dir}}/crash.log"},
                                                {datatype, file}
                                               ]}.
{translation,
 "lager.crash_log",
 fun(Conf) ->
         case cuttlefish:conf_get("log.crash", Conf) of
             false -> undefined;
             _ ->
                 cuttlefish:conf_get("log.crash.file", Conf, "{{platform_log_dir}}/crash.log")
         end
 end}.
%% @doc Maximum size in bytes of individual messages in the crash log
{mapping, "log.crash.maximum_message_size", "lager.crash_log_msg_size", [
                                                                         {default, "64KB"},
                                                                         {datatype, bytesize}
                                                                        ]}.
%% @doc Maximum size of the crash log in bytes, before it is rotated
{mapping, "log.crash.size", "lager.crash_log_size", [
                                                     {default, "10MB"},
                                                     {datatype, bytesize}
                                                    ]}.
%% @doc The schedule on which to rotate the crash log. For more
%% information see:
%% https://github.com/basho/lager/blob/master/README.md#internal-log-rotation
{mapping, "log.crash.rotation", "lager.crash_log_date", [
                                                         {default, "$D0"}
                                                        ]}.
%% @doc The number of rotated crash logs to keep. When set to
%% 'current', only the current open log file is kept.
{mapping, "log.crash.rotation.keep", "lager.crash_log_count", [
                                                               {default, 5},
                                                               {datatype, [integer, {atom, current}]},
                                                               {validators, ["rotation_count"]}
                                                              ]}.
{validator,
 "rotation_count",
 "must be 'current' or a positive integer",
 fun(current) -> true;
    (Int) when is_integer(Int) andalso Int >= 0 -> true;
    (_) -> false
 end}.
{translation,
 "lager.crash_log_count",
 fun(Conf) ->
         case cuttlefish:conf_get("log.crash.rotation.keep", Conf) of
             current -> 0;
             Int -> Int
         end
 end}.
%% @doc Whether to redirect error_logger messages into lager -
%% defaults to true
{mapping, "log.error.redirect", "lager.error_logger_redirect", [
                                                                {default, on},
                                                                {datatype, flag},
                                                                hidden
                                                               ]}.
%% @doc Maximum number of error_logger messages to handle in a second
{mapping, "log.error.messages_per_second", "lager.error_logger_hwm", [
                                                                      {default, 100},
                                                                      {datatype, integer},
                                                                      hidden
                                                                     ]}.
%% @doc Cookie for distributed node communication. All nodes in the
%% same cluster should use the same cookie or they will not be able to
%% communicate.
{mapping, "distributed_cookie", "vm_args.-setcookie", [
                                                       {default, "emqttd"}
                                                      ]}.
%% override zdbbl from 1mb to 32mb
{mapping, "erlang.distribution_buffer_size", "vm_args.+zdbbl", [
                                                                {default, "32MB"},
                                                                merge
                                                               ]}.
